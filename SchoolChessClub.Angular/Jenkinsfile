pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "angularschoolchessclub"
        DOCKER_FILE = "Dockerfile"
        APP_DIR = "SchoolChessClub.Angular"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Verify Structure') {
            steps {
                script {
                    dir(APP_DIR) {
                        sh '''
                            ls -la
                            [ -f package.json ] || exit 1
                            [ -f angular.json ] || exit 1
                        '''
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    dir(APP_DIR) {
                        sh 'npm ci --no-audit --prefer-offline'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir(APP_DIR) {
                        docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}", ".")
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    sh "docker stop ${DOCKER_IMAGE}-container || true"
                    sh "docker rm ${DOCKER_IMAGE}-container || true"
                    
                    sh """
                        docker run -d \
                            --name ${DOCKER_IMAGE}-container \
                            -p 5003:5003 \
                            --restart unless-stopped \
                            ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo '✅ Deployment completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}
